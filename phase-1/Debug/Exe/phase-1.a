;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/12/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include "header.h"
;
;// Declare your global variables here
;
;
;//unsigned char status=NOT_READY;
;unsigned char usart_buffer[MAX_USART_BUFFER_SIZE]={''};
;unsigned char usart_write_index = 0 , usart_read_index = 0;
;//_Bool usart_status = EMPTY;
;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028 char status=UCSRA,data=UDR;
; 0000 0029 
; 0000 002A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002B     {
; 0000 002C         uart_buffer[uart_write_index]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002D         uart_write_index++ ;
; 0000 002E         if(uart_write_index==MAX_UART_BUFFER_SIZE)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002F         {
; 0000 0030             uart_write_index=0;
;PCODE: $0000001D VOL: 0
; 0000 0031             uart_status = FULL;
;PCODE: $0000001E VOL: 0
; 0000 0032         }
; 0000 0033     }
;PCODE: $0000001F VOL: 0
; 0000 0034 
; 0000 0035 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void send_command(char command , int param  )
; 0000 0038 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0039 
; 0000 003A      char i=0 ;
; 0000 003B      char send_command[10]= {START_BYTE, VERSION_BYTE, LENGTH_BYTE, 0, FDBACK_BYTE, 0, 0, 0, 0, END_BYTE} ;
; 0000 003C      int checksum = ((0xFFFF - (VERSION_BYTE + LENGTH_BYTE + command + FDBACK_BYTE + param )) + 1 )  ;
; 0000 003D      send_command[3] =  command ;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;	command -> Y+16
;	param -> Y+14
;	i -> R17
;	send_command -> Y+4
;	checksum -> R18,R19
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003E      send_command[5] =  (( param >> 8 )& 0xFF )  ;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003F      send_command[6] =  ( param &  0xFF );
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0040      send_command[7] =  (( checksum >> 8 )& 0xFF )  ;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0041      send_command[8] =  ( checksum &  0xFF );
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0042 
; 0000 0043      for(i ; i < 10 ; i++ )
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0044          putchar(send_command[i]);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0045 }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;void usart_init(void)
; 0000 0048 {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0049 
; 0000 004A // USART initialization
; 0000 004B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 004C // USART Receiver: On
; 0000 004D // USART Transmitter: On
; 0000 004E // USART Mode: Asynchronous
; 0000 004F // USART Baud Rate: 9600
; 0000 0050 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0051 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0052 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0053 UBRRH=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0054 UBRRL=0x33;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0055 
; 0000 0056 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;void take_query(void)
; 0000 0058 {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0059 
; 0000 005A }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;void main(void)
; 0000 005C {
;PCODE: $0000006D VOL: 0
; 0000 005D // Declare your local variables here
; 0000 005E      usart_init();
;PCODE: $0000006E VOL: 0
; 0000 005F // Global enable interrupts
; 0000 0060 #asm("sei")
;PCODE: $0000006F VOL: 0
	sei
;PCODE: $00000070 VOL: 0
; 0000 0061       delay_ms(5000);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0062       send_command(0x03 , 0x0001);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0063 while (1)
;PCODE: $00000078 VOL: 0
; 0000 0064       {
; 0000 0065       // Place your code here
; 0000 0066 
; 0000 0067       }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0068 }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
