;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 07/31/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include "header.h"
;
;// Declare your global variables here
;unsigned char df_phase=STARTING;
;unsigned char query=0;
;unsigned int param=0;
;unsigned char df_status = NOT_READY;
;
;// USART Receiver buffer
;unsigned char uart_buffer[MAX_UART_BUFFER_SIZE] = {''};
;unsigned char uart_write_index = 0 , uart_read_index = 0;
;_Bool uart_status = EMPTY;
;
;// This flag is set on USART Receiver buffer overflow
;//bit rx_buffer_overflow;
;//
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E     char status=UCSRA,data=UDR;
; 0000 002F 
; 0000 0030     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0031     {
; 0000 0032         uart_buffer[uart_write_index]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0033         //printf ("%c" , uart_buffer[uart_write_index]) ;
; 0000 0034         //printf ("55");
; 0000 0035 
; 0000 0036         if(++uart_write_index==MAX_UART_BUFFER_SIZE)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0037         {
; 0000 0038             uart_write_index=0;
;PCODE: $00000020 VOL: 0
; 0000 0039             uart_status = FULL;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003A         }
; 0000 003B     }
;PCODE: $00000023 VOL: 0
; 0000 003C }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;//// Timer1 overflow interrupt service routine
;//interrupt [TIM1_OVF] void timer1_ovf_isr(void)
;//{
;//// Reinitialize Timer1 value
;//TCNT1H=0xCF2C >> 8;
;//TCNT1L=0xCF2C & 0xff;
;//// Place your code here
;//
;//}
;
;
;
;
;
;
;void df_command(unsigned char command , unsigned int param)
; 0000 004E {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 004F     unsigned char i=0;
; 0000 0050     unsigned int checksum = 0xFFFF - (VERSION_BYTE+LENGTH_BYTE+command+NO_FD_BYTE+((param>>8)& 0xFF )+(param & 0xFF ))+1 ...
; 0000 0051     unsigned char df_format[10]={START_BYTE,VERSION_BYTE,LENGTH_BYTE,0,NO_FD_BYTE,0,0,0,0,END_BYTE};
; 0000 0052     df_format[3]=command;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;	command -> Y+16
;	param -> Y+14
;	i -> R17
;	checksum -> R18,R19
;	df_format -> Y+4
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0053     df_format[5]=(param>>8)& 0xFF;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0054     df_format[6]=param & 0xFF;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0055     df_format[7]=(checksum>>8)&0xFF;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0056     df_format[8]=checksum & 0xFF;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0057 
; 0000 0058      for(i;i<10;i++)
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0059         putchar(df_format[i]);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005C }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;unsigned char df_query(void)
; 0000 005F {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0060 
; 0000 0061     unsigned char df_format[10]={START_BYTE,VERSION_BYTE,LENGTH_BYTE,0,NO_FD_BYTE,0,0,0,0,END_BYTE};
; 0000 0062 
; 0000 0063 
; 0000 0064     if((uart_read_index < uart_write_index)||(uart_status == FULL))
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;	df_format -> Y+0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0065     {
; 0000 0066         switch(df_phase)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0067         {
; 0000 0068             case STARTING :
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0069                 if(uart_buffer[uart_read_index] == df_format[df_phase])
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006A                 {
; 0000 006B                     #ifdef DEBUG
; 0000 006C                         printf("\r\nSTARTING");
; 0000 006D                     #endif
; 0000 006E                      df_phase++;
;PCODE: $00000084 VOL: 0
; 0000 006F                 }
; 0000 0070 
; 0000 0071 
; 0000 0072                 break;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0073             case VERSION :
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0074                 if(uart_buffer[uart_read_index] == df_format[df_phase])
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0075                 {
; 0000 0076                     #ifdef DEBUG
; 0000 0077                         printf("\r\nVERSION");
; 0000 0078                     #endif
; 0000 0079                      df_phase++;
;PCODE: $00000095 VOL: 0
; 0000 007A                 }
; 0000 007B                 break;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 007C             case LENGTH :
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 007D                 if(uart_buffer[uart_read_index] == df_format[df_phase])
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 007E                 {
; 0000 007F                     #ifdef DEBUG
; 0000 0080                         printf("\r\nLENGTH");
; 0000 0081                     #endif
; 0000 0082                      df_phase++;
;PCODE: $000000A6 VOL: 0
; 0000 0083                 }
; 0000 0084                 break;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0085             case QUERY :
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0086                 query=uart_buffer[uart_read_index];
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0087                 #ifdef DEBUG
; 0000 0088                     printf("\r\nQUERY");
; 0000 0089                 #endif
; 0000 008A                 df_phase++;
;PCODE: $000000B0 VOL: 0
; 0000 008B                 break;
;PCODE: $000000B1 VOL: 0
; 0000 008C             case FD_BACK :
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 008D                 if(uart_buffer[uart_read_index] == df_format[df_phase])
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 008E                 {
; 0000 008F                     #ifdef DEBUG
; 0000 0090                         printf("\r\nFD");
; 0000 0091                     #endif
; 0000 0092                     df_phase++;
;PCODE: $000000C0 VOL: 0
; 0000 0093                 }
; 0000 0094 
; 0000 0095                 break;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0096             case PARAM_MSB :
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0097                 param=uart_buffer[uart_read_index];
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0098                 param=(param<<8)&(0xFF00);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0099                 #ifdef DEBUG
; 0000 009A                     printf("\r\nPARAM_MSB");
; 0000 009B                 #endif
; 0000 009C                 df_phase++;
;PCODE: $000000CE VOL: 0
; 0000 009D                 break;
;PCODE: $000000CF VOL: 0
; 0000 009E                 //
; 0000 009F             case PARAM_LSB :
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00A0                 param=param | uart_buffer[uart_read_index];
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A1                 #ifdef DEBUG
; 0000 00A2                     printf("\r\nPARAM_LSB");
; 0000 00A3                 #endif
; 0000 00A4                 df_phase++;
;PCODE: $000000DA VOL: 0
; 0000 00A5                 break;
;PCODE: $000000DB VOL: 0
; 0000 00A6                 //
; 0000 00A7             case CHECK_MSB :
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00A8 //                unsigned int checksum = 0xFFFF - (VERSION_BYTE+LENGTH_BYTE+query+NO_FD_BYTE+((param>>8)& 0xFF )+(param ...
; 0000 00A9 //                unsigned char check_msb=(checksum>>8)&0xFF;
; 0000 00AA //                if(check_msb == uart_buffer[uart_read_index])
; 0000 00AB                     #ifdef DEBUG
; 0000 00AC                         printf("\r\nCHECK_MSB");
; 0000 00AD                     #endif
; 0000 00AE                     df_phase++;
;PCODE: $000000DF VOL: 0
; 0000 00AF                 break;
;PCODE: $000000E0 VOL: 0
; 0000 00B0             case CHECK_LSB :
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00B1 //                if((checksum & 0xFF)==uart_buffer[uart_read_index])
; 0000 00B2                  #ifdef DEBUG
; 0000 00B3                         printf("\r\nCHECK_LSB");
; 0000 00B4                  #endif
; 0000 00B5                 df_phase++;
;PCODE: $000000E4 VOL: 0
; 0000 00B6                 break;
;PCODE: $000000E5 VOL: 0
; 0000 00B7             case ENDING:
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00B8 
; 0000 00B9                  if(uart_buffer[uart_read_index] == df_format[df_phase])
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00BA                  {
; 0000 00BB                      #ifdef DEBUG
; 0000 00BC                         printf("\r\nENDING");
; 0000 00BD                      #endif
; 0000 00BE 
; 0000 00BF                      #ifdef DEBUG
; 0000 00C0                         printf("%x",query);
; 0000 00C1                      #endif
; 0000 00C2 
; 0000 00C3                      #ifdef DEBUG
; 0000 00C4                         printf("%x",param);
; 0000 00C5                      #endif
; 0000 00C6                     switch(query)
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00C7                     {
; 0000 00C8                         case ONLINE_EQUIPMENT :
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00C9                             switch(param)
;PCODE: $000000F8 VOL: 0
; 0000 00CA                             {
; 0000 00CB                                 case USB_ONLINE :
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00CC                                 case SD_ONLINE :
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00CD                                 case USB_SD|PC :
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00CE //                                    printf("\r\nHi there...");
; 0000 00CF                                     df_status=READY;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00D0                                     break;
;PCODE: $00000107 VOL: 0
; 0000 00D1 
; 0000 00D2                             }
;PCODE: $00000108 VOL: 0
; 0000 00D3 
; 0000 00D4                              break;
;PCODE: $00000109 VOL: 0
; 0000 00D5 //                        case():
; 0000 00D6 //                            break;
; 0000 00D7 //                        case():
; 0000 00D8 //                            break;
; 0000 00D9 //                        case():
; 0000 00DA //                            break;
; 0000 00DB //                        case():
; 0000 00DC //                            break;
; 0000 00DD 
; 0000 00DE                     }
;PCODE: $0000010A VOL: 0
; 0000 00DF 
; 0000 00E0                     df_phase=STARTING;
;PCODE: $0000010B VOL: 0
; 0000 00E1                  }
; 0000 00E2                 break;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00E3         }
;PCODE: $0000010E VOL: 0
; 0000 00E4 
; 0000 00E5         if(++uart_read_index == MAX_UART_BUFFER_SIZE)
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00E6         {
; 0000 00E7             uart_read_index = 0;
;PCODE: $00000113 VOL: 0
; 0000 00E8             uart_status = EMPTY;
;PCODE: $00000114 VOL: 0
; 0000 00E9         }
; 0000 00EA 
; 0000 00EB 
; 0000 00EC     }
;PCODE: $00000115 VOL: 0
; 0000 00ED //    printf("\r\nstatus = %d" , df_status);
; 0000 00EE     return df_status;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00EF }
;PCODE: $0000011A VOL: 0
;
;//unsigned char df_query(unsigned char query,unsigned int param)
;//{
;//    unsigned char df_phase=STARTING;
;//    unsigned char status=NOT_READY;
;//    unsigned int checksum = 0xFFFF - (VERSION_BYTE+LENGTH_BYTE+query+NO_FD_BYTE+((param>>8)& 0xFF )+(param & 0xFF ))+1 ...
;//    unsigned char df_format[10]={START_BYTE,VERSION_BYTE,LENGTH_BYTE,0,NO_FD_BYTE,0,0,0,0,END_BYTE};
;//    df_format[3]=query;
;//    df_format[5]=(param>>8)& 0xFF;
;//    df_format[6]=param & 0xFF;
;//    df_format[7]=(checksum>>8)&0xFF;
;//    df_format[8]=checksum & 0xFF;
;//
;//    while(uart_buffer[uart_read_index] == df_format[df_phase])
;//    {
;//        if((uart_read_index < uart_write_index))
;//        {
;//            if(++df_phase==ENDING)
;//            {
;//                df_phase=STARTING;
;//                status=READY;
;//            }
;//
;//             uart_read_index++;
;//
;//
;//        }
;//
;//
;//        else if(uart_status == FULL)
;//        {
;//             if(uart_read_index == MAX_UART_BUFFER_SIZE)
;//            {
;//                uart_read_index = 0;
;//                uart_status = EMPTY;
;//            }
;//
;//            if(++df_phase==ENDING)
;//            {
;//                df_phase=STARTING;
;//                status=READY;
;//            }
;//
;//            uart_read_index++;
;//        }
;//    }
;//
;//
;//    return  status;
;//}
;//
;void button_init(void)
; 0000 0124 {
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0125     BUTTON_DDR=0x00; //input
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0126     BUTTON_PORT=0xFF;//pull_up
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0127 }
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;
;void usart_init(void)
; 0000 012A {
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 012B 
; 0000 012C // USART initialization
; 0000 012D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 012E // USART Receiver: On
; 0000 012F // USART Transmitter: On
; 0000 0130 // USART Mode: Asynchronous
; 0000 0131 // USART Baud Rate: 9600
; 0000 0132 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0133 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0134 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0135 UBRRH=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0136 UBRRL=0x33;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0137 }
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;//void timer_init(void)
;//{
;//// Clock source: System Clock
;//// Clock value: 125.000 kHz
;//// Mode: Normal top=0xFFFF
;//// OC1A output: Disconnected
;//// OC1B output: Disconnected
;//// Noise Canceler: Off
;//// Input Capture on Falling Edge
;//// Timer Period: 0.1 s
;//// Timer1 Overflow Interrupt: On
;//// Input Capture Interrupt: Off
;//// Compare A Match Interrupt: Off
;//// Compare B Match Interrupt: Off
;//TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;//TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;//TCNT1H=0xCF;
;//TCNT1L=0x2C;
;//ICR1H=0x00;
;//ICR1L=0x00;
;//OCR1AH=0x00;
;//OCR1AL=0x00;
;//OCR1BH=0x00;
;//OCR1BL=0x00;
;//}
;
;// Standard Input/Output functions
;
;
;void main(void)
; 0000 0156 {
;PCODE: $00000131 VOL: 0
; 0000 0157 // Declare your local variables here
; 0000 0158 unsigned char key_in=((~BUTTON_PIN)&((SHAME)|(SADNESS)|(SURPRISE)|(ANGER)|(HAPPINESS)|(FEAR)));
; 0000 0159 //unsigned char i=0;
; 0000 015A usart_init();
;	key_in -> R17
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 015B //timer_init();
; 0000 015C button_init();
;PCODE: $00000137 VOL: 0
; 0000 015D // Global enable interrupts
; 0000 015E #asm("sei")
;PCODE: $00000138 VOL: 0
	sei
;PCODE: $00000139 VOL: 0
; 0000 015F //delay_ms(10000);
; 0000 0160 //printf("\r\ngoodbye maryam");
; 0000 0161 // printf("\r\nhello\r\n");
; 0000 0162 
; 0000 0163 
; 0000 0164 
; 0000 0165 while (1)
;PCODE: $0000013A VOL: 0
; 0000 0166 {
; 0000 0167     printf("\r\n%x",BUTTON_PIN);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0168     delay_ms(4000);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0169     printf("\r\n%x",key_in);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 016A     delay_ms(4000);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 016B //    if(df_query()== READY)
; 0000 016C //{
; 0000 016D //    for(i;i<1;i++)
; 0000 016E //    {
; 0000 016F //        df_command(0x03,0x0001);
; 0000 0170 ////        printf("%d",i);
; 0000 0171 //       delay_ms(6000);
; 0000 0172 //        df_command(0x03,0x0002);
; 0000 0173 //
; 0000 0174 //    }
; 0000 0175 //}
; 0000 0176 
; 0000 0177 
; 0000 0178 
; 0000 0179 
; 0000 017A         //if(key_in!=0)
; 0000 017B //
; 0000 017C //           {
; 0000 017D //            switch(key_in)
; 0000 017E //            {
; 0000 017F //                case(SHAME):
; 0000 0180 //
; 0000 0181 //                    df_command(0x03,0x0001);
; 0000 0182 //                    while(key_in==SHAME)
; 0000 0183 //                    {
; 0000 0184 //                    }
; 0000 0185 //                    break;
; 0000 0186 //                case(SADNESS):
; 0000 0187 //
; 0000 0188 //                    df_command(0x03,0x0002);
; 0000 0189 //                    while(key_in==SADNESS)
; 0000 018A //                    {
; 0000 018B //                    }
; 0000 018C //                    break;
; 0000 018D //                case(SURPRISE):
; 0000 018E //
; 0000 018F //                    df_command(0x03,0x0003);
; 0000 0190 //                    while(key_in==SURPRISE)
; 0000 0191 //                    {
; 0000 0192 //                    }
; 0000 0193 //                    break;
; 0000 0194 //                case(ANGER):
; 0000 0195 //
; 0000 0196 //                    df_command(0x03,0x0004);
; 0000 0197 //                    while(key_in==ANGER)
; 0000 0198 //                    {
; 0000 0199 //                    }
; 0000 019A //                    break;
; 0000 019B //                case(HAPPINESS):
; 0000 019C //
; 0000 019D //                    df_command(0x03,0x0005);
; 0000 019E //                    while(key_in==HAPPINESS)
; 0000 019F //                    {
; 0000 01A0 //                    }
; 0000 01A1 //                    break;
; 0000 01A2 //                case(FEAR):
; 0000 01A3 //
; 0000 01A4 //                    df_command(0x03,0x0006);
; 0000 01A5 //                    while(key_in==FEAR)
; 0000 01A6 //                    {
; 0000 01A7 //                    }
; 0000 01A8 //                    break;
; 0000 01A9 //
; 0000 01AA //
; 0000 01AB //
; 0000 01AC //            }
; 0000 01AD //            }
; 0000 01AE 
; 0000 01AF 
; 0000 01B0 
; 0000 01B1 
; 0000 01B2 
; 0000 01B3 
; 0000 01B4 
; 0000 01B5 }
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 01B6 }
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;
